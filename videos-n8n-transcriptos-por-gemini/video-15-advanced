춰Est치s a punto de completar el ciclo de aprendizaje! 游꿀 Este sexto video del **Curso Avanzado de n8n** se enfoca en la pr치ctica, gui치ndote a trav칠s de la construcci칩n de un *workflow* completo que integra varios de los conceptos avanzados que has aprendido.

Aqu칤 tienes el resumen detallado de **"n8n Curso Avanzado (6/8) - Construir un ejemplo completo"**:

***

## 丘뙖잺 Objetivo del Workflow

El objetivo es automatizar un proceso de ventas y enriquecimiento de datos de compa침칤as a partir de una lista de URLs, priorizando la gesti칩n de errores y la notificaci칩n:

1.  **Disparador:** Usar un **Form Trigger** (`Disparador de Formulario`) para ingresar una lista de URLs de compa침칤as.
2.  **Enriquecimiento:** Iterar sobre cada URL y enriquecer los datos utilizando el API de **People Data Labs (PDL)**, asegurando la gesti칩n de errores (c칩digos de estado `200`).
3.  **Filtrado:** Filtrar solo las compa침칤as ubicadas en **Europa**.
4.  **Almacenamiento:** A침adir los datos filtrados a un **Google Sheet**.
5.  **Notificaci칩n:** Enviar un mensaje de resumen a **Slack** con un enlace directo a la hoja de c치lculo.

***

## 游뿦 Pasos Clave del Workflow

### 1. Preparaci칩n de Datos (Trigger y Limpieza)

* **Form Trigger** [[00:52](http://www.youtube.com/watch?v=wOKLEfeJLVE&t=52)]: Se configura un disparador de formulario que acepta una lista de URLs (separadas por comas) en un solo campo.
* **Fijar Datos (*Pinning*)** [[01:35](http://www.youtube.com/watch?v=wOKLEfeJLVE&t=95)]: Se ejecuta el formulario una vez y se **fijan los datos** para no tener que volver a ingresar la lista de URLs durante las pruebas.
* **Edit Fields (Conversi칩n a Array)** [[01:58](http://www.youtube.com/watch?v=wOKLEfeJLVE&t=118)]: Se usa para tomar la cadena de URLs y **convertirla en una *Array*** de elementos, utilizando la coma (` , `) como separador. Esto permite tratar cada URL como un *Item* individual.
* **Split Out (Multi-Items)** [[02:40](http://www.youtube.com/watch?v=wOKLEfeJLVE&t=160)]: Se usa para tomar la *Array* de URLs del *Item* 칰nico y **convertirla en m칰ltiples *Items*** de n8n (uno por URL).

### 2. Enriquecimiento y Manejo de Errores

* **Loop Over Items (Batch Size 1)** [[03:04](http://www.youtube.com/watch?v=wOKLEfeJLVE&t=184)]: Se configura para que el siguiente bloque de nodos se ejecute **una vez por cada *Item*** (cada URL), lo que es crucial para llamar al API individualmente.
* **HTTP Request (People Data Labs)** [[03:26](http://www.youtube.com/watch?v=wOKLEfeJLVE&t=206)]:
    * Se configura la URL de *query* de PDL.
    * Se utiliza una **Credencial Gen칠rica** configurada como *Header* para la autenticaci칩n de la API Key.
    * El campo `website` del *query* SQL se reemplaza con una **expresi칩n** que apunta al *Item* actual (`{{ $json["URL list"] }}`) [[04:44](http://www.youtube.com/watch?v=wOKLEfeJLVE&t=284)].
* **Nodo If (Gesti칩n de Errores)** [[05:27](http://www.youtube.com/watch?v=wOKLEfeJLVE&t=327)]:
    * Se usa para verificar el estado de la respuesta del API. La condici칩n es: **`$json.status` no es igual a `200`**.
    * **Rama False (칄xito):** La ejecuci칩n contin칰a dentro del bucle.
    * **Rama True (Fallo):** Se usa el nodo **Stop and Throw Error** (`Detener y Lanzar Error`) [[05:59](http://www.youtube.com/watch?v=wOKLEfeJLVE&t=359)] para detener la ejecuci칩n de ese *Item* espec칤fico y registrar el error.

### 3. Transformaci칩n, Filtrado y Almacenamiento

* **Edit Fields (Mover Datos a Top Level)** [[06:36](http://www.youtube.com/watch?v=wOKLEfeJLVE&t=396)]: Dado que la respuesta del API de PDL tiene una estructura JSON profunda, se usa este nodo para **extraer campos clave** (como `name`, `employee_count`, `country`, `continent` y `total_funding_raised`) y colocarlos en el nivel superior del *Item* JSON. Esto simplifica el acceso y el mapeo posterior.
* **Nodo If (Filtrado)** [[08:24](http://www.youtube.com/watch?v=wOKLEfeJLVE&t=504)]: Se usa para filtrar los *Items* bas치ndose en la condici칩n: **`continent` es igual a `Europe`** (`Europa`).
* **Google Sheets (Append Rows)** [[08:47](http://www.youtube.com/watch?v=wOKLEfeJLVE&t=527)]: Los *Items* que cumplen la condici칩n se a침aden a la hoja de c치lculo mapeando los campos extra칤dos (`name`, `employees`, etc.) a las columnas.

### 4. Resumen y Notificaci칩n

* **Summarize (Contador)** [[09:23](http://www.youtube.com/watch?v=wOKLEfeJLVE&t=563)]: Este nodo se usa para contar el n칰mero de *Items* que llegaron a esta etapa (el n칰mero de compa침칤as a침adidas a la hoja), generando un *Item* de salida con el total (ej. `counter_name: 3`).
* **Slack (Notificaci칩n por Bloques)** [[09:48](http://www.youtube.com/watch?v=wOKLEfeJLVE&t=588)]:
    * Se configura el nodo para enviar un mensaje a un usuario espec칤fico.
    * Se utiliza el modo **Blocks** (Bloques) en lugar de texto simple para crear un mensaje est칠ticamente m치s agradable y funcional.
    * Se integra el resultado del `Summarize` mediante una **expresi칩n** (`{{ $json.counter_name }}`) en el texto del mensaje [[12:08](http://www.youtube.com/watch?v=wOKLEfeJLVE&t=728)].
    * Se a침ade un **bot칩n** en el bloque que enlaza directamente a la URL del Google Sheet, haciendo que la notificaci칩n sea accionable [[10:30](http://www.youtube.com/watch?v=wOKLEfeJLVE&t=630)].

El pr칩ximo video se centrar치 en el manejo avanzado de **archivos** (*files*) y datos binarios en n8n [[14:04](http://www.youtube.com/watch?v=wOKLEfeJLVE&t=844)].
http://googleusercontent.com/youtube_content/28

¡Claro! Con este video, has llegado a la recta final del curso. El manejo de la **depuración (*debugging*)** y la **recuperación de fallos (*retry*)** es lo que te permite mantener *workflows* estables y profesionales.

Aquí tienes los puntos clave del video **"n8n Curso para Principiantes (8/9) - Depuración"**:

***

## 🐞 Depuración (*Debugging*) de Workflows

La depuración es el proceso de **identificar y corregir** los errores que surgen cuando un *workflow* está activo (en producción).

### 1. Causas Comunes de Fallos [[00:45](http://www.youtube.com/watch?v=Gxe_RfCRH-o&t=45)]

Un nodo puede fallar por varias razones:

* **Configuración incorrecta:** El nodo tiene ajustes erróneos.
* **Servicio no disponible:** El servicio externo (ej. Slack, Google Sheets) arroja un error temporal, como un error 500.
* **Problemas con datos de entrada:** Los datos recibidos (ej. por un *Webhook*) están **incompletos o en un formato inesperado**, lo que provoca que un nodo posterior falle (ej. falta una clave esencial como el `ID`).

### 2. Uso del Modo de Depuración (*Debug in Editor*)

Esta es la herramienta más poderosa para solucionar fallos [[02:34](http://www.youtube.com/watch?v=Gxe_RfCRH-o&t=154)]:

* **Función:** Permite **copiar y fijar (*pin*) los datos de una ejecución fallida** (o no exitosa) en el lienzo actual del editor.
* **Flujo de Trabajo:**
    1.  Encuentra la ejecución fallida en el **Historial de Ejecuciones**.
    2.  Haz clic en el botón **"Debug in Editor"**.
    3.  El *canvas* cargará el *workflow* con los datos de entrada exactos que causaron el error, marcados con un ícono azul/morado [[03:22](http://www.youtube.com/watch?v=Gxe_RfCRH-o&t=202)].
    4.  Ahora puedes probar tus correcciones (como añadir nodos `IF` o `Filter`) y ejecutar paso a paso (**Test Step**) hasta que el *workflow* procese los datos sin errores [[08:46](http://www.youtube.com/watch?v=Gxe_RfCRH-o&t=526)].

### 3. Solucionando Fallos que No Son Errores

A veces, un *workflow* **no falla oficialmente**, pero tampoco cumple su objetivo (ej. no se encuentra una entrada en la base de datos y no se envía el mensaje) [[01:54](http://www.youtube.com/watch?v=Gxe_RfCRH-o&t=114)].

* **Causa:** Un nodo (ej. Google Sheets) no encuentra datos y no devuelve *Items*, lo que detiene la ejecución del flujo sin marcarse como "Failed" [[12:25](http://www.youtube.com/watch?v=Gxe_RfCRH-o&t=745)].
* **Solución experta:**
    1.  Asegúrate de que los nodos críticos (como el de lectura de datos) estén configurados para **"Always output data"** (siempre emitir datos) en sus ajustes avanzados [[13:33](http://www.youtube.com/watch?v=Gxe_RfCRH-o&t=813)]. Esto garantiza que, incluso si no encuentra la información, devuelva al menos un *Item* vacío.
    2.  Añade una **comprobación de datos** (`IF` o `Filter`) después del nodo de lectura para ver si el *Item* devuelto contiene la clave esperada (ej. si el contacto tiene un `email` válido) [[13:54](http://www.youtube.com/watch?v=Gxe_RfCRH-o&t=834)].
    3.  Si la clave no existe, usa un nodo **Stop and Error** para manejar el caso ("Contacto no encontrado en la base de datos"), asegurando que el *Error Workflow* sea notificado y que el fallo no pase desapercibido [[14:47](http://www.youtube.com/watch?v=Gxe_RfCRH-o&t=887)].

***

## 🔁 Recuperación de Errores (*Retry*) y Control de Versiones

### 1. Función de Reintento (*Retry*)

Una vez que has depurado y corregido un error en el *workflow*, puedes usar la función **Retry** para reprocesar las ejecuciones fallidas [[03:55](http://www.youtube.com/watch?v=Gxe_RfCRH-o&t=235)]:

* **Uso:** Desde el **Historial de Ejecuciones**, puedes seleccionar una o varias ejecuciones fallidas y reejecutarlas.
* **Inicio del Reintento:** La reejecución comienza **a partir del nodo que falló** originalmente, y no desde el *trigger* [[04:31](http://www.youtube.com/watch?v=Gxe_RfCRH-o&t=271)].
* **Versión a Usar:** Puedes elegir si quieres reintentar con:
    * El ***workflow* original** (tal como estaba en el momento del fallo).
    * El ***workflow* actualmente guardado** (la versión que acabas de corregir) [[04:20](http://www.youtube.com/watch?v=Gxe_RfCRH-o&t=260)].

### 2. Historial de Versiones

El **Historial de Versiones** es tu red de seguridad [[05:58](http://www.youtube.com/watch?v=Gxe_RfCRH-o&t=358)].

* **Función:** n8n guarda automáticamente versiones del *workflow* cuando haces cambios significativos o activas/desactivas el *workflow*.
* **Utilidad:** Te permite **revertir cambios** si una corrección reciente introdujo un nuevo error (*bug*), o inspeccionar la estructura de una versión anterior [[06:16](http://www.youtube.com/watch?v=Gxe_RfCRH-o&t=376)].

***

Con esto, has completado los pasos esenciales para entender el diseño, la lógica y el mantenimiento de *workflows* en n8n. ¡Ya estás listo para enfrentar el **curso avanzado**!
http://googleusercontent.com/youtube_content/14
